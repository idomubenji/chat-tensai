# Deploy to EC2
# Updated: Testing GitHub Actions deployment after security group update

name: Deploy to EC2

on:
  push:
    branches:
      - main  # or your default branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: --max_old_space_size=4096
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_PRODUCTION_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_PRODUCTION_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.PRODUCTION_SUPABASE_SERVICE_ROLE_KEY }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "${{ secrets.EC2_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
      
      - name: Create env file
        run: |
          cat > .env.production << EOL
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_PRODUCTION_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_PRODUCTION_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.PRODUCTION_SUPABASE_SERVICE_ROLE_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}
          NODE_ENV=production
          EOL
      
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ec2-user
        run: |
          # Create deployment package
          tar -czf deploy.tar.gz \
            .next \
            public \
            app \
            components \
            lib \
            hooks \
            types \
            .env.production \
            next.config.mjs \
            middleware.ts \
            package.json \
            package-lock.json \
            ecosystem.config.js \
            tailwind.config.ts \
            postcss.config.mjs \
            tsconfig.json \
            next-env.d.ts

          # Debug: List contents of tar file
          tar -tvf deploy.tar.gz

          # Copy deployment package
          scp -i ~/.ssh/deploy_key deploy.tar.gz $EC2_USER@$EC2_HOST:~
          
          # Deploy on EC2
          ssh -i ~/.ssh/deploy_key $EC2_USER@$EC2_HOST '
            # Stop existing application
            pm2 stop chat-genius 2>/dev/null || true
            
            # Clean and create directory
            rm -rf ~/chat-genius
            mkdir -p ~/chat-genius
            cd ~/chat-genius
            
            # Extract deployment package
            tar -xzf ../deploy.tar.gz
            
            # Install production dependencies
            npm ci --production
            
            # Start application
            pm2 start npm --name "chat-genius" -- start
            pm2 save
          ' 