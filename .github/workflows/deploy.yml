# Deploy to EC2
name: Deploy to EC2

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: --max_old_space_size=4096
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_PRODUCTION_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_PRODUCTION_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.PRODUCTION_SUPABASE_SERVICE_ROLE_KEY }}
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      
      - name: Check for database changes
        id: check_db
        run: |
          CHANGED=$(git diff --name-only HEAD^ HEAD | grep -E "^supabase/migrations/|^supabase/config" || true)
          if [ ! -z "$CHANGED" ]; then
            echo "has_db_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_db_changes=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          if [ -e package-lock.json ]; then
            npm ci --production
          else
            npm install --production
          fi
          npm install --save-dev typescript@latest @types/node@latest
      
      - name: Setup Supabase CLI
        if: steps.check_db.outputs.has_db_changes == 'true'
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase and Sync Database
        if: steps.check_db.outputs.has_db_changes == 'true'
        run: |
          supabase init --force
          supabase start
          echo "Creating local env file for database sync..."
          cat > .env.local.backup1 << EOL
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_DEVELOPMENT_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_DEVELOPMENT_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.DEVELOPMENT_SUPABASE_SERVICE_ROLE_KEY }}
          EOL
          echo "Running database sync..."
          npx ts-node scripts/sync-db.ts
      
      - name: Build application
        run: npm run build

      - name: Setup SSH
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-add ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          ssh -o ConnectTimeout=30 ec2-user@${{ secrets.EC2_HOST }} 'echo "SSH connection successful"'
      
      - name: Create env file
        run: |
          cat > .env.production << EOL
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_PRODUCTION_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_PRODUCTION_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.PRODUCTION_SUPABASE_SERVICE_ROLE_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}
          NODE_ENV=production
          PORT=3000
          EOL

      - name: Deploy to EC2
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          # Copy setup script first
          scp -o ConnectTimeout=30 scripts/setup-nginx.sh ec2-user@${{ secrets.EC2_HOST }}:~
          
          # Create deployment package
          tar -czf deploy.tar.gz \
            .next/standalone \
            .next/static \
            public \
            .env.production \
            ecosystem.config.js

          # Copy deployment package
          scp -o ConnectTimeout=30 deploy.tar.gz ec2-user@${{ secrets.EC2_HOST }}:~
          
          # Deploy with error handling
          ssh -o ConnectTimeout=30 ec2-user@${{ secrets.EC2_HOST }} '
            set -e
            
            # Setup Nginx if not already done
            if [ ! -f /etc/nginx/conf.d/chat-genius.conf ]; then
              echo "Setting up Nginx..."
              chmod +x ~/setup-nginx.sh
              sudo ~/setup-nginx.sh
            fi
            
            echo "Stopping existing application..."
            sudo pm2 stop chat-genius 2>/dev/null || true
            
            echo "Cleaning up old deployment..."
            # Use sudo to handle permission issues
            if [ -d "~/chat-genius" ]; then
              sudo rm -rf ~/chat-genius
            fi
            mkdir -p ~/chat-genius
            
            echo "Extracting new deployment..."
            tar -xzf deploy.tar.gz -C ~/chat-genius
            cd ~/chat-genius
            
            echo "Setting up static files..."
            mkdir -p .next/standalone/.next/static
            mkdir -p .next/standalone/public
            
            # Copy static files with verbose output for debugging
            echo "Copying static files..."
            cp -rv .next/static/* .next/standalone/.next/static/
            cp -rv public/* .next/standalone/public/
            
            echo "Copying configuration files..."
            cp -v .env.production .next/standalone/
            cp -v ecosystem.config.js .next/standalone/
            
            # Ensure proper ownership of all files
            echo "Setting correct permissions..."
            sudo chown -R ec2-user:ec2-user ~/chat-genius
            
            echo "Starting application..."
            cd .next/standalone
            sudo -E NODE_ENV=production pm2 start server.js --name "chat-genius" && sudo pm2 save
            
            echo "Restarting Nginx..."
            sudo systemctl restart nginx
            
            echo "Deployment complete!"
            
            # Print directory structure for verification
            echo "Verifying directory structure:"
            ls -R .next/
          ' 